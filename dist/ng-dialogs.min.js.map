{"version":3,"sources":["ng-dialogs.js"],"names":["global","factory","exports","module","define","amd","this","Generator","uniqueId","prefix","i","ngDialogsCoreService","$rootScope","$q","$document","$compile","$controller","$http","$templateCache","$timeout","createDialog","options","Dialog","config","showDialog","dialogScope","$broadcast","EVENTS","SHOW","$dialog","visible","hideDialog","HIDE","destroyDialog","DESTROY","$destroy","dialogElement","remove","api","_getTemplate","deferred","defer","resolve","reject","templateUrl","tmpl","get","then","response","put","data","Error","template","promise","_constructDialog","dialogHtml","templateBefore","templateAfter","join","dialogElementTemplate","angular","element","linkFn","attr","id","addClass","hide","show","destroy","cssClass","controller","controlConstructor","$scope","dialog","controllerAs","plugins","length","pluginFn","parent","_getParentElement","append","isElement","isString","querySelector","find","deferredConstruction","defaults","undefined","noop","extend","$new","INIT","ngDialogsCorePluginsService","$window","autoShow","scope","$on","restoreFocus","focus","activeElement","OUTSIDE_CLICK","dialogFocus","el","getElementById","focusElement","backdropEvent","backdropElement","backdrop","on","BACKDROP_CLICK","backdropDestroy","backdropClose","console","log","outsideDestroy","outsideClose","outsideEvent","handleClick","evt","isClickedOutside","clickedOutSide","target","parentNode","off","escapeEvent","addEventListener","event","keyCode","ESCAPE_PRESS","escapeDestroy","escapeClose","focusTrap","getDialogFrame","frame","setTripWires","container","prepend","getTripWires","querySelectorAll","trapFocus","e","dialogElements","getFocusableDialogElements","frameElement","pop","shift","className","indexOf","isElementVisible","selector","slice","call","style","getComputedStyle","visibility","opacity","modeless","dialogFrame","tripWires","forEach","wire","aria","addAriaRoles","ariaConfig","addAriaRole","role","value","addRole","arguments","roleWithGeneratedId","name","attributeName","ngDialogsModalService","modalOptions","aria-describedby","modelessOptions","dialogOptions","plugin","push","$inject"],"mappings":"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","file":"ng-dialogs.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (factory());\n}(this, function () { 'use strict';\n\n    var EVENTS = {\n        // core events\n        INIT: 'dialog:init',\n        SHOW: 'dialog:show',\n        HIDE: 'dialog:hide',\n        DESTROY: 'dialog:destroy',\n\n        // plugin events\n        BACKDROP_CLICK: 'dialog:backdrop_click',\n        OUTSIDE_CLICK: 'dialog:outside_click',\n        ESCAPE_PRESS: 'dialog:escape_press',\n\n    };\n\n    var uniqueId = (new Generator()).uniqueId;\n\n    function Generator() {\n        var i = 0;\n\n        function uniqueId(prefix) {\n            return (prefix || '') + (++i);\n        }\n\n        return {\n            uniqueId: uniqueId\n        };\n    }\n\n    function ngDialogsCoreService($rootScope, $q, $document, $compile, $controller, $http, $templateCache, $timeout) {\n\n        var api = {\n            createDialog: createDialog\n        };\n\n        return api;\n\n        /**\n         * Low level API\n         *\n         * @param  {Object} options map\n         * @return {Object}         Dialog\n         */\n        function createDialog(options) {\n            return new Dialog(options);\n        }\n\n        /**\n         * Dialog Class\n         *\n         * @param {Object}   config\n         * @param {String}   config.template\n         * @param {String}   config.templateUrl\n         * @param {String}   config.controller\n         * @param {Function} config.controller\n         * @param {String}   config.controllerAs\n         */\n        function Dialog(config) {\n\n            // wait for template retrieval and dialog construction\n            // make sure construction is complete before show/hide/destroy are executed\n            var deferredConstruction = $q.defer();\n\n            // default config\n            var defaults = {\n                parent: undefined,\n                id: undefined,\n                cssClass: undefined,\n                template: '',\n                templateUrl: undefined,\n                templateBefore: '<div ng-show=\"$dialog.visible\">',\n                templateAfter: '</div>',\n                controller: angular.noop,\n                controllerAs: undefined,\n                plugins: []\n            };\n\n            var options = angular.extend({}, defaults, config);\n\n            if (!options.id) {\n                options.id = uniqueId('ng-dialogs__');\n            }\n\n            var api = {\n                show: function() {\n                    var deferred = $q.defer();\n                    deferredConstruction.promise.then(function() {\n                        showDialog();\n                        $timeout(deferred.resolve);\n                    });\n                    return deferred.promise;\n                },\n                hide: function() {\n                    var deferred = $q.defer();\n                    deferredConstruction.promise.then(function() {\n                        hideDialog();\n                        $timeout(deferred.resolve);\n                    });\n                    return deferred.promise;\n                },\n                destroy: function() {\n                    var deferred = $q.defer();\n                    hideDialog();\n                    destroyDialog();\n                    $timeout(deferred.resolve);\n                    return deferred.promise;\n                }\n            };\n\n            // create new scope for dialog\n            var dialogScope = $rootScope.$new();;\n            var dialogElement;\n\n            _getTemplate(options).then(function(template) {\n                _constructDialog(dialogScope, options, template);\n\n                // trigger digest cycle\n                $timeout(angular.noop);\n\n                dialogScope.$broadcast(EVENTS.INIT);\n                deferredConstruction.resolve();\n            });\n\n            return api;\n\n            function showDialog() {\n                dialogScope.$broadcast(EVENTS.SHOW);\n                dialogScope.$dialog.visible = true;\n            }\n\n            function hideDialog() {\n                dialogScope.$broadcast(EVENTS.HIDE);\n                dialogScope.$dialog.visible = false;\n            }\n\n            function destroyDialog() {\n                dialogScope.$broadcast(EVENTS.DESTROY);\n                //  clean up scope and remove the element from the DOM.\n                dialogScope.$destroy();\n                dialogElement.remove();\n                api = null;\n            }\n\n            function _getTemplate(options) {\n                var deferred = $q.defer();\n                var resolve = deferred.resolve;\n                var reject = deferred.reject;\n\n                if (options.templateUrl) {\n                    var tmpl = $templateCache.get(options.templateUrl);\n\n                    if (tmpl) {\n                        resolve(tmpl);\n                    } else {\n                        $http.get(options.templateUrl).then(function(response) {\n                            $templateCache.put(options.templateUrl, response.data);\n                            resolve(response.data);\n                        }, function() {\n                            throw new Error('ng-dialogs: failed to fetch template: ' + options.templateUrl);\n                        });\n                    }\n                } else if (options.template) {\n                    resolve(options.template);\n                } else {\n                    throw new Error('ng-dialogs: no template configuration found');\n                }\n\n                return deferred.promise;\n            }\n\n            function _constructDialog(dialogScope, options, template) {\n                var dialogHtml = [options.templateBefore, template, options.templateAfter].join('');    //wrap template dialog html\n                var dialogElementTemplate = angular.element(dialogHtml);\n\n                // compile then link the template element, building the actual element.\n                var linkFn = $compile(dialogElementTemplate);\n                dialogElement = linkFn(dialogScope);\n\n                // add unique id to dialog\n                dialogElement.attr('id', options.id);\n\n                // hide dialog initially; for css animations\n                dialogElement.addClass('ng-hide');\n\n                // internal scope object to hold dialog state and api\n                var $dialog = {};\n\n                $dialog.hide = api.hide;\n                $dialog.show = api.show;\n                $dialog.destroy = api.destroy;\n                $dialog.visible = false;\n\n                dialogScope.$dialog = $dialog;\n\n                // set css class from options\n                if (options.cssClass) {\n                    dialogElement.addClass(options.cssClass);\n                }\n\n                if (options.controller) {\n                    var controlConstructor = {\n                        $scope: dialogScope,\n                        dialog: api\n                        //$element : dialogElement  // inject dialogElement as $element into controller.\n                    };\n\n                    // Only the first two parameters are allowed to use (see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L95)\n                    // Needed to use the undocumented third and fourth parameters to enable controllerAs support.\n                    if (options.controllerAs) {\n                        $controller(options.controller, controlConstructor, false, options.controllerAs);\n                    } else {\n                        $controller(options.controller, controlConstructor);\n                    }\n                }\n\n                if (options.plugins) {\n                    for (var i = 0; i < options.plugins.length; i++) {\n                        var pluginFn = options.plugins[i];\n                        pluginFn(dialogScope, dialogElement, api, options);\n                    }\n                }\n\n                var parent = _getParentElement(options);\n\n                // append dialog to parent element\n                parent.append(dialogElement);\n            }\n\n            function _getParentElement(options) {\n                if (angular.isElement(options.parent)) {\n                    return angular.element(options.parent);\n                }\n\n                if (options.parent && angular.isString(options.parent)) {\n                    return angular.element($document[0].querySelector(options.parent));\n                }\n\n                return $document.find('body');\n            }\n\n        }\n    }\n\n    function ngDialogsCorePluginsService($window, $document, $timeout) {\n\n        var plugins = {\n            autoShow: autoShow,\n            restoreFocus: restoreFocus,\n            dialogFocus: dialogFocus,\n            backdropEvent: backdropEvent,\n            backdropDestroy: backdropDestroy,\n            outsideEvent: outsideEvent,\n            outsideDestroy: outsideDestroy,\n            escapeEvent: escapeEvent,\n            escapeDestroy: escapeDestroy,\n            focusTrap: focusTrap,\n            aria: aria\n        };\n\n        return plugins;\n\n        /**\n         * Open dialog automatically after `dialog:init`\n         */\n        function autoShow(scope, element, dialog, options) {\n            if (options.autoShow === true) {\n                scope.$on(EVENTS.INIT, dialog.show);\n            }\n        }\n\n        /**\n         * Restores focus to element before showing dialog\n         */\n        function restoreFocus(scope, element, dialog, options) {\n            if (options.focus) {\n                var activeElement;\n\n                scope.$on(EVENTS.SHOW, function() {\n                    activeElement = $document[0].activeElement;\n                });\n\n                // don't restore focus to activeElement\n                scope.$on(EVENTS.OUTSIDE_CLICK, function() {\n                    activeElement = null;\n                });\n\n                scope.$on(EVENTS.HIDE, function() {\n                    // schedule; allowing 'dialog:outside_click' to nullify activeElement\n                    $timeout(function() {\n                        if (activeElement) {\n                            activeElement.focus();\n                            activeElement = null;\n                        }\n                    });\n                });\n            }\n        }\n\n        /**\n         * Sets focus to element after showing dialog\n         */\n        function dialogFocus(scope, element, dialog, options) {\n            if (options.focus) {\n                scope.$on(EVENTS.SHOW, function() {\n                    $timeout(function() {\n                        var el = (typeof options.focus === 'string') ?\n                                        element[0].querySelector(options.focus) :\n                                        $document[0].getElementById(options.id);\n\n                        if (el) {\n                            var focusElement = angular.element(el);\n                            focusElement.attr('tabindex', -1);\n                            el.focus();\n                        }\n                    });\n                });\n            }\n        }\n\n        /**\n         * Broadcast 'dialog:backdrop_click' when clicked on backdrop\n         */\n        function backdropEvent(scope, element, dialog, options) {\n            scope.$on(EVENTS.INIT, function() {\n                var backdropElement = element[0].querySelector('.ng-dialogs-modal__backdrop');\n\n                if (backdropElement) {\n                    var backdrop = angular.element(backdropElement);\n                    backdrop.on('click', function() {\n                        scope.$broadcast(EVENTS.BACKDROP_CLICK);\n                    });\n                }\n            });\n        }\n\n        /**\n         * Destroy dialog when clicked on backdrop\n         */\n        function backdropDestroy(scope, element, dialog, options) {\n            if (options.backdropClose) {\n                console.log(options.backdropClose);\n                scope.$on(EVENTS.BACKDROP_CLICK, dialog.destroy);\n            }\n        }\n\n        /**\n         * Destroy dialog when clicked outside\n         */\n        function outsideDestroy(scope, element, dialog, options) {\n            if (options.outsideClose) {\n                scope.$on(EVENTS.OUTSIDE_CLICK, dialog.destroy);\n            }\n        }\n\n        /**\n         * Broadcast 'dialog:outside_click' when clicked outside\n         */\n        function outsideEvent(scope, element, dialog, options) {\n            scope.$on(EVENTS.SHOW, function() {\n                $timeout(function() {\n                    $document.on('click', handleClick);\n                });\n            });\n\n            scope.$on(EVENTS.HIDE, function() {\n                $document.off('click', handleClick);\n            });\n\n            function handleClick(evt) {\n                if (isClickedOutside(evt)) {\n                    scope.$broadcast(EVENTS.OUTSIDE_CLICK);\n                }\n            }\n\n            function isClickedOutside(evt) {\n                var clickedOutSide = true;\n\n                var target = evt.target;\n\n                while (target.parentNode) {         // loop till root node\n                    if (element[0] === target) {    // when elements matches, it means it was clicked inside.\n                        return false;\n                    }\n                    target = target.parentNode;\n                }\n\n                //looped till root node, so it was clicked outside.\n                return clickedOutSide;\n            }\n        }\n\n        /**\n         * Broadcast 'dialog:esc_press' when ESC key is pressed\n         */\n        function escapeEvent(scope, element, dialog) {\n            scope.$on(EVENTS.INIT, function() {\n                element[0].addEventListener('keydown', function(event) {\n                    if (event.keyCode === 27) {\n                        scope.$broadcast(EVENTS.ESCAPE_PRESS);\n                    }\n                }, true);\n            });\n        }\n\n        /**\n         * Destroy dialog when on keyboard ESC\n         */\n        function escapeDestroy(scope, element, dialog, options) {\n            if (options.escapeClose) {\n                scope.$on(EVENTS.ESCAPE_PRESS, dialog.destroy);\n            }\n        }\n\n        function focusTrap(scope, element, dialog, options) {\n\n            if (!options.focusTrap || options.modeless) {\n                return;\n            }\n\n            scope.$on(EVENTS.INIT, function() {\n                var dialogFrame = angular.element(getDialogFrame());\n                setTripWires(dialogFrame);\n            });\n\n            scope.$on(EVENTS.SHOW, function() {\n                var tripWires = getTripWires();\n\n                tripWires.forEach(function(wire) {\n                    angular.element(wire).on('keyup keydown', trapFocus);\n                });\n            });\n\n            scope.$on(EVENTS.HIDE, function() {\n                var tripWires = getTripWires();\n\n                tripWires.forEach(function(wire) {\n                    angular.element(wire).off('keyup keydown', trapFocus);\n                });\n            });\n\n            function getDialogFrame() {\n                return element[0].querySelector(options.frame) || element[0];\n            }\n\n            function setTripWires(container) {\n                container.prepend('<div class=\"ng-dialogs-tripwire--top\" tabindex=\"0\" aria-hidden=\"true\"></div>');\n                container.append('<div class=\"ng-dialogs-tripwire--bottom\" tabindex=\"0\" aria-hidden=\"true\"></div>');\n            }\n\n            function getTripWires() {\n                return element[0].querySelectorAll('div[class^=ng-dialogs-tripwire]');\n            }\n\n            function trapFocus(e) {\n                var dialogElements = getFocusableDialogElements();\n                var frameElement = getDialogFrame();\n                var focusElement;\n\n                // find a focusable element\n                while (dialogElements.length) {\n                    // reverse iteration direction when shiftKey is pressed\n                    focusElement = (e.shiftKey) ? dialogElements.pop() : dialogElements.shift();\n\n                    // exclude dialog frame, tripwires and non-visible elements\n                    if ((focusElement.className.indexOf('ng-dialogs-tripwire') === -1) &&\n                        (focusElement !== frameElement) &&\n                        isElementVisible(focusElement)) {\n                        break;\n                    } else {\n                        focusElement = undefined;\n                    }\n\n                }\n\n                focusElement = focusElement || frameElement;\n                focusElement.focus();\n            }\n\n            function getFocusableDialogElements() {\n                var selector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), ' +\n                               'textarea:not([disabled]), button:not([disabled]), iframe, object, embed, ' +\n                               ' *[tabindex], *[contenteditable]';\n\n                // https://davidwalsh.name/nodelist-array\n                return [].slice.call(element[0].querySelectorAll(selector));\n            }\n\n            function isElementVisible(element) {\n                var style = $window.getComputedStyle(element);\n                return !((style.visibility && style.visibility === 'hidden') || (style.opacity && style.opacity === '0'));\n            }\n        }\n\n        function aria(scope, element, dialog, options) {\n            var ariaConfig = options.aria;\n\n            if (!ariaConfig) {\n                return;\n            }\n\n            scope.$on(EVENTS.INIT, addAriaRoles);\n\n            function addAriaRoles() {\n                for (var attr in ariaConfig) {\n                    addAriaRole(attr, ariaConfig[attr]);\n                }\n            }\n\n            function addAriaRole(role, value) {\n                switch (role) {\n                    case 'role':\n                        addRole(role, value);\n                        break;\n                    case 'aria-describedby':\n                        console.log(arguments);\n                        roleWithGeneratedId(role, value);\n                        break;\n                    case 'aria-labelledby':\n                        console.log(arguments);\n                        roleWithGeneratedId(role, value);\n                        break;\n                }\n            }\n\n            function addRole(name, value) {\n                var el = angular.element(getDialogFrame());\n                el.attr(name, value);\n            }\n\n            function roleWithGeneratedId(attributeName, selector) {\n                if (attributeName && selector) {\n                    var el = element[0].querySelector(selector) || getDialogFrame();\n                    el = angular.element(el);\n                    var id = options.id + '--' + attributeName;\n                    el.attr('id', id);\n                    el.attr(attributeName, id);\n                }\n            }\n\n            function getDialogFrame() {\n                return element[0].querySelector(options.frame) || element[0];\n            }\n\n        }\n\n    }\n\n    function ngDialogsModalService(ngDialogsCoreService, ngDialogsCorePluginsService) {\n\n        var api = {\n            createDialog: createDialog\n        };\n\n        return api;\n\n        function createDialog(config) {\n\n            var modalOptions = {\n                cssClass: 'ng-dialogs-theme--basic',\n                templateBefore: '<div class=\"ng-dialogs-modal\" ng-show=\"$dialog.visible\">' +\n                                    '<div class=\"ng-dialogs-modal__backdrop\"></div>' +\n                                    '<div class=\"ng-dialogs-modal__frame\">',\n                templateAfter:      '</div>' +\n                                '</div>',\n                autoShow: true,\n                frame: '.ng-dialogs-modal__frame',\n                focus: '.ng-dialogs-modal__frame',\n                focusTrap: true,\n                escapeClose: true,\n                outsideClose: true,\n                backdropClose: true,\n                aria: {\n                    'role': 'dialog',\n                    // 'aria-labelledby': '.ng-dialogs-modal__frame',\n                    'aria-describedby': '.ng-dialogs-modal__frame'\n                }\n            };\n\n            var modelessOptions = {\n                cssClass: 'ng-dialogs-theme--basic',\n                templateBefore: '<div class=\"ng-dialogs-modeless ng-dialogs-modeless__frame\" ng-show=\"$dialog.visible\">',\n                templateAfter: '</div>',\n                autoShow: true,\n                focus: true,\n                frame: '.ng-dialogs-modeless__frame',\n                escapeClose: true,\n                outsideClose: true,\n                backdropClose: false,\n                // aria: {\n                //     'role': 'tooltip'\n                // }\n            };\n\n            var dialogOptions = (config.modeless === true) ? modelessOptions : modalOptions;\n\n            var options = angular.extend({}, dialogOptions, config);\n\n            var plugins = [\n                ngDialogsCorePluginsService.autoShow,\n                ngDialogsCorePluginsService.backdropEvent,\n                ngDialogsCorePluginsService.backdropDestroy,\n                ngDialogsCorePluginsService.outsideEvent,\n                ngDialogsCorePluginsService.outsideDestroy,\n                ngDialogsCorePluginsService.escapeEvent,\n                ngDialogsCorePluginsService.escapeDestroy,\n                ngDialogsCorePluginsService.dialogFocus,\n                ngDialogsCorePluginsService.restoreFocus,\n                ngDialogsCorePluginsService.focusTrap,\n                ngDialogsCorePluginsService.aria,\n            ];\n\n            options.plugins = plugins;\n\n            // Additional user plugins\n            if (config.plugins) {\n                config.plugins.forEach(function(plugin) {\n                    options.plugins.push(plugin);\n                });\n            }\n\n            var dialog = ngDialogsCoreService.createDialog(options);\n            return dialog;\n        }\n\n    }\n\n    angular.module('ng-dialogs-core',       []);\n    angular.module('ng-dialogs-messagebox', ['ng-dialogs-core']);\n    angular.module('ng-dialogs-modal',      ['ng-dialogs-core']);\n    angular.module('ng-dialogs',            ['ng-dialogs-messagebox', 'ng-dialogs-modal']);\n\n    angular.module('ng-dialogs-core').factory('ngDialogsCoreService', ngDialogsCoreService);\n    angular.module('ng-dialogs-core').factory('ngDialogsCorePluginsService', ngDialogsCorePluginsService);\n    angular.module('ng-dialogs-modal').factory('ngDialogsModalService', ngDialogsModalService);\n\n}));"],"sourceRoot":"/source/"}